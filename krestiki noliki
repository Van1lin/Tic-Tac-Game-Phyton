import random
import colorama
from colorama import Fore, Style

colorama.init(autoreset=True)

def initialize_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

def display_board(board):
    print("\n-------------")
    for row in board:
        colored_row = []
        for cell in row:
            if cell == 'X':
                colored_row.append(Fore.GREEN + cell)
            elif cell == 'O':
                colored_row.append(Fore.RED + cell)
            else:
                colored_row.append(cell)
        print(f"| {colored_row[0]} | {colored_row[1]} | {colored_row[2]} |")
        print("-------------")

def get_player_move(board, player_symbol):
    while True:
        try:
            row = int(input(f"Player {Fore.GREEN + player_symbol}, enter row (0, 1, 2): "))
            col = int(input(f"Player {Fore.GREEN + player_symbol}, enter column (0, 1, 2): "))

            if row in [0, 1, 2] and col in [0, 1, 2]:
                if board[row][col] == ' ':
                    board[row][col] = player_symbol
                    break
                else:
                    print("This cell is already taken. Try again.")
            else:
                print("Invalid input. Row and column must be 0, 1, or 2.")
        except ValueError:
            print("Invalid input. Please enter numbers only.")

def get_computer_move(board, computer_symbol):
    player_symbol = 'X'

    def try_move(symbol):
        for r in range(3):
            for c in range(3):
                if board[r][c] == ' ':
                    board[r][c] = symbol
                    if check_win(board, symbol):
                        if symbol == computer_symbol:
                            print(f"\nComputer ({Fore.RED + computer_symbol}) chose row {r}, column {c}")
                        else:
                            board[r][c] = computer_symbol
                            print(f"\nComputer ({Fore.RED + computer_symbol}) blocked at row {r}, column {c}")
                        return True
                    board[r][c] = ' '
        return False

    if try_move(computer_symbol):
        return
    if try_move(player_symbol):
        return
    if board[1][1] == ' ':
        board[1][1] = computer_symbol
        print(f"\nComputer ({Fore.RED + computer_symbol}) chose center (1, 1)")
        return
    empty_cells = [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']
    if empty_cells:
        row, col = random.choice(empty_cells)
        board[row][col] = computer_symbol
        print(f"\nComputer ({Fore.RED + computer_symbol}) chose row {row}, column {col}")

def check_win(board, symbol):
    for row in board:
        if all([cell == symbol for cell in row]):
            return True
    for col in range(3):
        if all([board[row][col] == symbol for row in range(3)]):
            return True
    if all([board[i][i] == symbol for i in range(3)]):
        return True
    if all([board[i][2 - i] == symbol for i in range(3)]):
        return True
    return False

def check_draw(board):
    for row in board:
        if ' ' in row:
            return False
    return True

def play_game():
    board = initialize_board()
    player_symbol = 'X'
    computer_symbol = 'O'
    current_player = player_symbol

    while True:
        display_board(board)

        if current_player == player_symbol:
            get_player_move(board, player_symbol)
            if check_win(board, player_symbol):
                display_board(board)
                print(Fore.GREEN + f"Player {player_symbol} wins!")
                break
        else:
            get_computer_move(board, computer_symbol)
            if check_win(board, computer_symbol):
                display_board(board)
                print(Fore.RED + f"Computer {computer_symbol} wins!")
                break

        if check_draw(board):
            display_board(board)
            print(Fore.YELLOW + "It's a draw!")
            break

        current_player = computer_symbol if current_player == player_symbol else player_symbol

if __name__ == "__main__":
    play_game()
